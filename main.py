import telebot
from telebot import types
import sqlite3
import re

TOKEN = "7948328886:AAFEkbhTT7d-dzc3MeadtnjirLvlefoOjlM"
bot = telebot.TeleBot(TOKEN)    

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
conn = sqlite3.connect("data-set-orders.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
cursor.execute("""CREATE TABLE IF NOT EXISTS orders (
    username TEXT,
    order_text TEXT
)""")
conn.commit()

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def save_order(username, order_text):
    cursor.execute("INSERT INTO orders (username, order_text) VALUES (?, ?)", (username, order_text))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
def get_orders(username):
    cursor.execute("SELECT order_text FROM orders WHERE username = ?", (username,))
    orders = cursor.fetchall()
    return [order[0] for order in orders]

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
bot.set_my_commands([
    types.BotCommand("start", "–°—Ç–∞—Ä—Ç"),
    types.BotCommand("order_history", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"),
    types.BotCommand("new_order", "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start_bot(message):
    bot.send_message(message.from_user.id,
                     """üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.

üîπ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.

üìù –í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º.""")
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", callback_data="yes")
    key_no = types.InlineKeyboardButton(text="üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π", callback_data="no")
    keyboard.add(key_no, key_yes)
    bot.send_message(message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "yes":
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")
        bot.edit_message_text("–•–æ—Ä–æ—à–æ", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(call.message, task_description_yes)
    elif call.data == "no":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–π–¥–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å.")
        bot.edit_message_text("–•–æ—Ä–æ—à–æ", call.message.chat.id, call.message.message_id)
        bot.register_next_step_handler(call.message, task_description_no)

def task_description_no(message):
    username = message.from_user.username
    if username is None:
        bot.send_message(message.from_user.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã.")
        return

    order_text = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    save_order(username, order_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î

    bot.send_message(message.from_user.id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

def task_description_yes(message):
    username = message.from_user.username
    if username is None:
        bot.send_message(message.from_user.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã.")
        return

    order_text = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    save_order(username, order_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î

    bot.send_message(message.from_user.id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order_history
@bot.message_handler(commands=["order_history"])
def order_history(message):
    username = message.from_user.username
    if username is None:
        bot.send_message(message.from_user.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç username! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    orders = get_orders(username)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ –ë–î –ø–æ username
    if not orders:
        bot.send_message(message.from_user.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        def escape_md(text):
            return re.sub(r'([_*[\]()~>#+-=|{}.!])', r'\\\1', text)

        history_text = "\n\n".join([f"üìå {escape_md(order)}" for order in orders])
        bot.send_message(
            message.from_user.id, 
            f"üìú *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:*\n\n{history_text}", 
            parse_mode="MarkdownV2"
        )

#—á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É new order
@bot.message_handler(commands=["new_order"])
def new_order(message):
    txt = "–í–∞—à –æ—Ç–≤–µ—Ç:"
    bot.send_message(message.from_user.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞—Ö–æ—Ç–µ–ª –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑. –ù–∞—á–Ω–µ–º?")
    keyboar = types.InlineKeyboardMarkup()
    key_no = types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —è –Ω–∞–∂–∞–ª —Å–ª—É—á–∞–π–Ω–æ!", callback_data="no")
    key_yes = types.InlineKeyboardButton(text="‚úÖ –ù–∞—á–Ω–µ–º!", callback_data="yes")
    keyboar.add(key_no, key_yes)
    bot.send_message(message.from_user.id, text = txt, reply_markup=keyboar)

@bot.callback_query_handler(func=lambda call:True)
def new_order_otvet(call):
    if call.data == "no":
        bot.send_message(call.message.chat.id, "–ñ–∞–ª–∫–æ, –∑–Ω–∞—á–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòî")
        return
    elif call.data == "yes":
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –ù–∞—á–Ω–µ–º üôÇ")
        start_bot(call.message)

#–∑–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
bot.polling(non_stop=True, interval=0)
